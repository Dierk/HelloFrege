/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.23.423-gb587ccb from
  ../projects/git/HelloFrege/src/main/frege/HelloFrege.fr Do not edit this file!
  Instead, edit the source file and recompile.
*/


import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@frege.runtime.Meta.FregePackage(
  source="../projects/git/HelloFrege/src/main/frege/HelloFrege.fr", time=1461672887311L, ops={},
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "frege.test.QuickCheck", "frege.java.util.Regex"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "QuickCheck", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @frege.runtime.Meta.SymV(
      offset=75, name=@frege.runtime.Meta.QName(pack="HelloFrege", base="testLength"), stri="s",
      sig=0, depth=0, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=119, name=@frege.runtime.Meta.QName(pack="HelloFrege", base="main"), stri="s(u)",
      sig=2, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=25, name=@frege.runtime.Meta.QName(pack="HelloFrege", base="greeting"), stri="s",
      sig=3, depth=0, rkind=49
    )
  },
  symls={},
  taus={
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={
        @frege.runtime.Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")
      }
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=0, subb=1),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=4, subb=5),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=6),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={
        @frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")
      }
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=8, subb=9),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=10, subb=11)
  },
  rhos={
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=2),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=7),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=12),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=2), @frege.runtime.Meta.Rho(rhofun=false, rhotau=6)
  },
  sigmas={
    @frege.runtime.Meta.Sigma(rho=0), @frege.runtime.Meta.Sigma(rho=1),
    @frege.runtime.Meta.Sigma(rho=3), @frege.runtime.Meta.Sigma(rho=4)
  },
  exprs={@frege.runtime.Meta.Expr()}, kinds={@frege.runtime.Meta.Kind(kind=0)}
)

final public class HelloFrege  {
  

final public static Ĳ ĳ = new Ĳ();
// Bind {String, java.lang.String, "Hello Frege"}
// function `greeting`  s  {RValue, RSimple, RSafeTC}
// String
// "Hello Frege"
final public static java.lang.String greeting = "Hello Frege";
// Bind {Property, Lambda, complicated java expression}
// function `testLength`  s  {RValue, RSimple, RSafeTC}
// Property
// once (== (length greeting) 11)
final public static frege.runtime.Lambda testLength = 
  QuickCheckProperty.once(
        QuickCheckProperty.ITestable_Bool.it,
        new frege.runtime.Delayed() {
          final public java.lang.Object eval() {
            return PreludeBase.TStringJ.length(HelloFrege.greeting) == 11;
          }
        }
      )
;
// function `main`  s(u)  {RValue, RSimple, RSafeTC}
// [String] → IO ()
// λ_ -> println greeting
final public static frege.runtime.Lambda $main(final frege.runtime.Lazy arg$1) {
  // return Lambda  println greeting
  // Bind {IO (), Lambda, Prelude.println(PreludeText.IShow_String.it, HelloFrege.greeting)}
  return Prelude.println(PreludeText.IShow_String.it, HelloFrege.greeting);
}
@frege.runtime.Meta.FunctionPointers(
  qnames={@frege.runtime.Meta.QName(pack="HelloFrege", base="main")}, jnames={"$mainƒf1a0454"}
)
public static class Ĳ  {
  public Ĳ() {}
  final public static class $mainƒf1a0454 extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    public $mainƒf1a0454() {}
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return HelloFrege.$main(frege.runtime.Delayed.delayed(arg$1));
    }
    final public static $mainƒf1a0454 inst = new $mainƒf1a0454();
  }
}
public static void main(final java.lang.String[] argv) {
  final long t1 = java.lang.System.nanoTime();
  java.lang.Integer xit = frege.runtime.Runtime.runMain(
    frege.prelude.PreludeBase.TST.performUnsafe(
      Ĳ.$mainƒf1a0454.inst.apply(frege.prelude.PreludeBase._toList(argv)).<frege.runtime.Lambda>forced()));
  final long t2 = java.lang.System.nanoTime();
  frege.runtime.Runtime.stderr.get().println(
    "runtime " + ((((t2 - t1) + 500000) / 1000000) / 1e3) + " wallclock seconds.");
  if (xit != null) java.lang.System.exit(xit);
}
}
