module SimpleLens where

data Bank       = Bank      { client    :: Client     }
data Client     = Client    { portfolio :: Portfolio  }
data Portfolio  = Portfolio { position  :: Position   }
data Position   = Position  { soMany :: Int, ticker :: Ticker }

derive Show Bank
derive Show Client
derive Show Portfolio
derive Show Position

data Ticker = GOOG | MSFT | APPL | CANO | NOOB
derive Show Ticker

bank = Bank {
    client = Client {
        portfolio = Portfolio {
            position = Position { soMany = 8, ticker = CANO }
        }
    }
}

updatePosition :: (Position -> Position) -> Bank -> Bank
updatePosition f bank = bank.{client <- _.{portfolio <- _.{position <- f } } } 

updatePosition2 :: (Position -> Position) -> Bank -> Bank
updatePosition2 f bank = bank.{client <-} _.{portfolio <- _.{position <- f } }

updatePosition3 :: (Position -> Position) -> Bank -> Bank
updatePosition3 f bank = bank.{client <-} $ _.{portfolio <-} _.{position <- f }

updatePosition4 :: (Position -> Position) -> Bank -> Bank
updatePosition4 =  flip _.{client <-} . flip _.{portfolio <-} . flip _.{position <-}   

updateSoMany :: (Int -> Int) -> Bank -> Bank
updateSoMany = updatePosition4 . flip _.{soMany <-}

main _ = do
    println "--- classic record usage"
    newPos    = bank.client.portfolio.position.{soMany <-} (+1)
    newPortf  = bank.client.portfolio.{position =} newPos
    newClient = bank.client.{portfolio =} newPortf
    newBank   = bank.{client =} newClient
    nextBank  = newBank.{client <- _.{portfolio <- _.{position <- _.{soMany <- (+1) } } } } 
    
    println $ show bank.client.portfolio.position
    println newPos
    println newPortf
    println newClient
    println newBank
    println nextBank
    
    println "--- using updatePosition "
    println $ updatePosition  _.{soMany <- (+1) } nextBank
    println "--- using updatePosition2 "
    println $ updatePosition2 _.{soMany <- (+2) } nextBank
    println "--- using updatePosition3 "
    println $ updatePosition3 _.{soMany <- (+3) } nextBank 
    println "--- using updatePosition4 "
    println $ updatePosition4 _.{soMany <- (+4) } nextBank 
    println "--- using updateSoMany "
    println $ updateSoMany (+5) nextBank 