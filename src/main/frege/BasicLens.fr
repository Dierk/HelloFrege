--- adapted from https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation
module BasicLens where

import frege.data.wrapper.Const 
import frege.data.wrapper.Identity 

getConst :: Const a b -> a
getConst (Const a) = a

runIdentity :: Identity a -> a
runIdentity (Identity a) = a

type Lens s a = forall f. Functor f => (a -> f a) -> s -> f s

view :: Lens s a -> (s -> a)
view lens = getConst . lens Const

set :: Lens s a -> (a -> s -> s)
set lens x = runIdentity . lens (Identity . const x)

over :: Lens s a -> (a -> a) -> s -> s
over lens f = runIdentity . lens (Identity . f)

data Bank       = Bank      { client    :: Client     }
data Client     = Client    { portfolio :: Portfolio  }
data Portfolio  = Portfolio { position  :: Position   }
data Position   = Position  { soMany :: Int, ticker :: Ticker }

soManyLens :: Lens Position Int -- Functor f => (Int -> f Int) -> Position -> f Position
soManyLens f p = fmap  p.{soMany =} (f p.soMany)

positionLens :: Lens Portfolio Position
positionLens f p = fmap p.{position =} (f p.position)

portfolioLens :: Lens Client Portfolio
portfolioLens f c = fmap c.{portfolio =} (f c.portfolio)

clientLens :: Lens Bank Client
clientLens f b = fmap b.{client =} (f b.client)

derive Show Bank
derive Show Client
derive Show Portfolio
derive Show Position

data Ticker = GOOG | MSFT | APPL | CANO | NOOB
derive Show Ticker

bank = Bank {
    client = Client {
        portfolio = Portfolio {
            position = Position { soMany = 8, ticker = CANO }
        }
    }
}


main _ = do    
    p = Position 0 APPL
    println $ view soManyLens p
    println $ set  soManyLens 1 p
    println $ over soManyLens (+2) p
    
    println $ view (positionLens . soManyLens) Portfolio{position=p}
    
    -- println $ set (clientLens . portfolioLens . positionLens . soManyLens) (3) bank