--- adapted from https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation
module BasicLens where

import frege.data.wrapper.Const 
import frege.data.wrapper.Identity       

--- the Lens type. See also issue https://github.com/Frege/frege/issues/278
--- That issue is fixed. We only need to upgrade to the latest compiler
type Lens s a = forall f. Functor f => (a -> f a) -> s -> f s

--     ( Lens s a                      ) → ( s → a )
--     ((a -> f a     ) → s → f s      ) → ( s → a )
view ∷ ((v → Const v a) → s → Const a s) → ( s → a )
view lens = Const.get . lens Const

--    (Lens s a )                         → (a → s → s)
set ∷ ((a → Identity a) → s → Identity s) → (a → s → s)
set lens x = over lens (const x)

--     (Lens s a                         ) → (a → a) → (s → s)
over ∷ ((a → Identity a) → s → Identity s) → (a → a) → (s → s)
over lens f = Identity.run . lens (Identity . f)


-- ===================== example usage =======================

data Bank       = Bank      { client    :: Client     }
data Client     = Client    { portfolio :: Portfolio  }
data Portfolio  = Portfolio { position  :: Position   }
data Position   = Position  { soMany    :: Int        }

soManyLens :: Lens Position Int 
soManyLens f p = fmap  p.{soMany =} (f p.soMany)

positionLens :: Lens Portfolio Position
positionLens f p = fmap p.{position =} (f p.position)

portfolioLens :: Lens Client Portfolio
portfolioLens f c = fmap c.{portfolio =} (f c.portfolio)

clientLens :: Lens Bank Client
clientLens f b = fmap b.{client =} (f b.client)

derive Show Bank
derive Show Client
derive Show Portfolio
derive Show Position

bank = Bank {
    client = Client {
        portfolio = Portfolio {
            position = Position { soMany = 0 }
        }
    }
}

main _ = do    
    position  = Position  0 
    portfolio = Portfolio position
    println $ view soManyLens      position
    println $ set  soManyLens   1  position
    println $ over soManyLens (+2) position
    
    println $ view (positionLens . soManyLens)      portfolio
    println $ set  (positionLens . soManyLens)   3  portfolio
    println $ over (positionLens . soManyLens) (+4) portfolio
    
    viewLens = clientLens . portfolioLens . positionLens . soManyLens
    println $ view viewLens bank
    -- cannot use viewLens for both, view and set/over. Solved with latest compiler (bounds branch)
    setLens = clientLens . portfolioLens . positionLens . soManyLens
    println $ set  setLens   5  bank
    println $ over setLens (+6) bank